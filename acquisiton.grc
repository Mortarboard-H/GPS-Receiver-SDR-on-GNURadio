options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: GPGacqusition
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 243]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 6e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [298, 107]
    rotation: 0
    state: enabled
- name: vectorLen
  id: variable
  parameters:
    comment: ''
    value: int(samp_rate/1e3)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [490, 168]
    rotation: 0
    state: enabled
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: P:\data\sim_gps\6MHZ_IQ_8bit_300s_single.bin
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [130, 338]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: vectorLen
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 348]
    rotation: 0
    state: true
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 365]
    rotation: 0
    state: true
- name: blocks_vector_to_stream_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: vectorLen
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1163, 361]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded\
      \ Python Block example - a simple multiply const\"\"\"\n\n    def generateCAcode(self,\
      \ prn):\n        \n        return CAcode\n        \n        \n    def __init__(self,\
      \ sampleRate=6e6,centreFreq=0,prn=1,acqThreshold=2,vectorSize=6000):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='GPS Signal Acquisition',   # will show up in GRC\n      \
      \      in_sig=[(np.complex64,vectorSize)],\n            out_sig=[(np.complex64,vectorSize)]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.sampleRate\
      \ = sampleRate\n        self.centreFreq=centreFreq\n        self.prn=prn-1\n\
      \        prn=self.prn\n        self.CAcode=[]\n        self.acqThreshold=acqThreshold\n\
      \        self.lastAcquiredFreq=0\n        self.acquiredFreq=0\n        self.lastCodePhase=0\n\
      \        self.codePhase=0\n        self.samplesPerCode=int(sampleRate/1e3)\n\
      \        self.portName='msg out'\n        self.message_port_register_out(pmt.intern(self.portName))\n\
      \        # CAcode = generateCAcode(PRN)\n\n        #   Inputs:\n        #  \
      \     PRN         - PRN number of the sequence.\n\n        #   Outputs:\n  \
      \      #       CAcode      - a vector containing the desired C/A code sequence\n\
      \        #                   (chips).\n\n        # --- Make the code shift array.\
      \ The shift depends on the PRN number -------\n        # The g2s vector holds\
      \ the appropriate shift of the g2 code to generate\n        # the C/A code (ex.\
      \ for SV#19 - use a G2 shift of g2s(19) = 471)\n\n        assert prn in range(0,\
      \ 32)\n        g2s = [5, 6, 7, 8, 17, 18, 139, 140, 141, 251,\n            \
      \   252, 254, 255, 256, 257, 258, 469, 470, 471, 472,\n               473, 474,\
      \ 509, 512, 513, 514, 515, 516, 859, 860,\n               861, 862,\n      \
      \         145, 175, 52, 21, 237, 235, 886, 657, 634, 762, 355, 1012, 176, 603,\
      \ 130, 359, 595, 68, 386]\n\n        # --- Pick right shift for the given PRN\
      \ number ----------------------------\n        g2shift = g2s[prn]\n\n      \
      \  # --- Generate G1 code -----------------------------------------------------\n\
      \n        # --- Initialize g1 output to speed up the function ---\n        g1\
      \ = np.zeros(1023)\n\n        # --- Load shift register ---\n        reg = -1\
      \ * np.ones(10)\n\n        # --- Generate all G1 signal chips based on the G1\
      \ feedback polynomial -----\n        for i in range(1023):\n            g1[i]\
      \ = reg[-1]\n            saveBit = reg[2] * reg[9]\n            reg[1:] = reg[:-1]\n\
      \            reg[0] = saveBit\n\n        # --- Generate G2 code -----------------------------------------------------\n\
      \n        # --- Initialize g2 output to speed up the function ---\n        g2\
      \ = np.zeros(1023)\n\n        # --- Load shift register ---\n        reg = -1\
      \ * np.ones(10)\n\n        # --- Generate all G2 signal chips based on the G2\
      \ feedback polynomial -----\n        for i in range(1023):\n            g2[i]\
      \ = reg[-1]\n            saveBit = reg[1] * reg[2] * reg[5] * reg[7] * reg[8]\
      \ * reg[9]\n            reg[1:] = reg[:-1]\n            reg[0] = saveBit\n\n\
      \        # --- Shift G2 code --------------------------------------------------------\n\
      \        # The idea: g2 = concatenate[ g2_right_part, g2_left_part ];\n    \
      \    g2 = np.r_[g2[1023 - g2shift:], g2[:1023 - g2shift]]\n\n        # --- Form\
      \ single sample C/A code by multiplying G1 and G2 -----------------\n      \
      \  self.CAcode = -g1 * g2\n        CAcode=self.CAcode\n        CAcode=np.array(CAcode)\n\
      \        codeIndex=np.floor(np.linspace(0,1023,num=int(self.samplesPerCode),endpoint=False))\n\
      \        codeIndex=np.longlong(codeIndex)\n        self.codeSequence=CAcode[codeIndex]\n\
      \        # get frequency domin of the codeSequence\n        self.codeFreqDomin=np.fft.fft(self.codeSequence[:]).conj()\n\
      \    \n\n    def work(self, input_items, output_items):\n        \"\"\"example:\
      \ multiply with constant\"\"\"\n        \n        sig=np.array(input_items[0][0])\n\
      \        shapeSig=sig.shape\n        #print(sig.shape)\n       \n        \n\
      \        ##generate code sequence\n        \n        samplesPerCode=self.samplesPerCode\n\
      \        \n        \n        ## get the frequency-codePhase mat\n        searchBand=20\
      \ #kHz\n        freqBins=searchBand*2+1 # 500Hz per bin\n        #initialize\
      \ the space for frequency-codePhase mat\n        freqCodeMat=np.zeros((freqBins,samplesPerCode))\n\
      \        # generate time sequence \n        t=np.linspace(0,1e-3,num=int(samplesPerCode),endpoint=False)\n\
      \        \n        for freqBin in range(freqBins):\n            #the frequency\n\
      \            frequency=self.centreFreq-searchBand*1e3+freqBin*500\n        \
      \    \n            #generate the carrier signal\n            carrier=np.exp(1j*frequency*2*np.pi*t)\n\
      \            #print(carrier.shape)\n            \n            #get the sig in\
      \ frequency Domin\n            sigFreq=np.fft.fft(carrier*sig)\n           \
      \ \n            #get the acquisition result of this frequency bin\n        \
      \    acqRes=abs(np.fft.ifft(sigFreq*self.codeFreqDomin))\n            \n   \
      \         freqCodeMat[freqBin,:]=acqRes[:]\n            \n            #print(acqRes.shape)\n\
      \        \n        #print(freqCodeMat.shape)\n        peakValue=freqCodeMat.max(0).max(0)\n\
      \        \n        maxFreqIndex=freqCodeMat.max(1).argmax()\n        \n    \
      \    maxCodePhaseIndex=freqCodeMat.max(0).argmax()\n        \n        tempFreq=self.centreFreq-searchBand*1e3+maxFreqIndex*500\n\
      \        \n        ##find more accurate frequency\n        \n        #rotate\
      \ the code sequence\n        codeSequence=np.roll(self.codeSequence,maxCodePhaseIndex)\n\
      \        \n        #remove the CA code\n        sig=sig*codeSequence\n     \
      \   \n        #get fft result\n        sigFreqDom=np.fft.fft(sig)\n        sigFreqDom=abs(sigFreqDom)\n\
      \        \n        maxFreqIndex=sigFreqDom.argmax()\n        if(maxFreqIndex<(samplesPerCode/2)):\n\
      \            tempFreq=(maxFreqIndex/samplesPerCode)*self.sampleRate\n      \
      \  else:\n            tempFreq=(maxFreqIndex/samplesPerCode)*self.sampleRate-self.sampleRate\n\
      \        \n        \n        \n        \n        \n        print(peakValue,\"\
      \   \" ,np.median(freqCodeMat),\"   \",tempFreq,\"  \",maxCodePhaseIndex)\n\
      \            \n        PMT_msg=pmt.from_float(tempFreq)\n        self.message_port_pub(pmt.intern(self.portName),PMT_msg)\n\
      \        \n        \n        \n        output_items[0][:]=input_items[0]\n \
      \       return len(output_items[0])\n"
    acqThreshold: '2'
    affinity: ''
    alias: ''
    centreFreq: '0'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    prn: '29'
    sampleRate: samp_rate
    vectorSize: vectorLen
  states:
    _io_cache: ('GPS Signal Acquisition', 'blk', [('sampleRate', '6000000.0'), ('centreFreq',
      '0'), ('prn', '1'), ('acqThreshold', '2'), ('vectorSize', '6000')], [('0', 'complex',
      6000)], [('0', 'complex', 6000), ('msg out', 'message', 1)], 'Embedded Python
      Block example - a simple multiply const', ['acqThreshold', 'centreFreq', 'prn',
      'sampleRate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [873, 310]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1368, 367]
    rotation: 0
    state: true

connections:
- [blocks_file_source_0, '0', blocks_throttle_0, '0']
- [blocks_stream_to_vector_0, '0', epy_block_0, '0']
- [blocks_throttle_0, '0', blocks_stream_to_vector_0, '0']
- [blocks_vector_to_stream_0, '0', qtgui_time_sink_x_0, '0']
- [epy_block_0, '0', blocks_vector_to_stream_0, '0']

metadata:
  file_format: 1
